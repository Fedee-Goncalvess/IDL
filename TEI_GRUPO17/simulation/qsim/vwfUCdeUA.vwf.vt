// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/26/2025 03:48:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    UC_de_UA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UC_de_UA_vlg_sample_tst(
	LOAD_F,
	LOAD_I,
	Q0,
	Q1,
	sampler_tx
);
input  LOAD_F;
input  LOAD_I;
input  Q0;
input  Q1;
output sampler_tx;

reg sample;
time current_time;
always @(LOAD_F or LOAD_I or Q0 or Q1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module UC_de_UA_vlg_check_tst (
	IenVF_UA,
	IenVI_UA,
	OenVI_UA,
	sampler_rx
);
input  IenVF_UA;
input  IenVI_UA;
input  OenVI_UA;
input sampler_rx;

reg  IenVF_UA_expected;
reg  IenVI_UA_expected;
reg  OenVI_UA_expected;

reg  IenVF_UA_prev;
reg  IenVI_UA_prev;
reg  OenVI_UA_prev;

reg  IenVF_UA_expected_prev;
reg  IenVI_UA_expected_prev;
reg  OenVI_UA_expected_prev;

reg  last_IenVF_UA_exp;
reg  last_IenVI_UA_exp;
reg  last_OenVI_UA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	IenVF_UA_prev = IenVF_UA;
	IenVI_UA_prev = IenVI_UA;
	OenVI_UA_prev = OenVI_UA;
end

// update expected /o prevs

always @(trigger)
begin
	IenVF_UA_expected_prev = IenVF_UA_expected;
	IenVI_UA_expected_prev = IenVI_UA_expected;
	OenVI_UA_expected_prev = OenVI_UA_expected;
end



// expected IenVF_UA
initial
begin
	IenVF_UA_expected = 1'bX;
end 

// expected IenVI_UA
initial
begin
	IenVI_UA_expected = 1'bX;
end 

// expected OenVI_UA
initial
begin
	OenVI_UA_expected = 1'bX;
end 
// generate trigger
always @(IenVF_UA_expected or IenVF_UA or IenVI_UA_expected or IenVI_UA or OenVI_UA_expected or OenVI_UA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected IenVF_UA = %b | expected IenVI_UA = %b | expected OenVI_UA = %b | ",IenVF_UA_expected_prev,IenVI_UA_expected_prev,OenVI_UA_expected_prev);
	$display("| real IenVF_UA = %b | real IenVI_UA = %b | real OenVI_UA = %b | ",IenVF_UA_prev,IenVI_UA_prev,OenVI_UA_prev);
`endif
	if (
		( IenVF_UA_expected_prev !== 1'bx ) && ( IenVF_UA_prev !== IenVF_UA_expected_prev )
		&& ((IenVF_UA_expected_prev !== last_IenVF_UA_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IenVF_UA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IenVF_UA_expected_prev);
		$display ("     Real value = %b", IenVF_UA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_IenVF_UA_exp = IenVF_UA_expected_prev;
	end
	if (
		( IenVI_UA_expected_prev !== 1'bx ) && ( IenVI_UA_prev !== IenVI_UA_expected_prev )
		&& ((IenVI_UA_expected_prev !== last_IenVI_UA_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IenVI_UA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IenVI_UA_expected_prev);
		$display ("     Real value = %b", IenVI_UA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_IenVI_UA_exp = IenVI_UA_expected_prev;
	end
	if (
		( OenVI_UA_expected_prev !== 1'bx ) && ( OenVI_UA_prev !== OenVI_UA_expected_prev )
		&& ((OenVI_UA_expected_prev !== last_OenVI_UA_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OenVI_UA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OenVI_UA_expected_prev);
		$display ("     Real value = %b", OenVI_UA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_OenVI_UA_exp = OenVI_UA_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module UC_de_UA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg LOAD_F;
reg LOAD_I;
reg Q0;
reg Q1;
// wires                                               
wire IenVF_UA;
wire IenVI_UA;
wire OenVI_UA;

wire sampler;                             

// assign statements (if any)                          
UC_de_UA i1 (
// port map - connection between master ports and signals/registers   
	.IenVF_UA(IenVF_UA),
	.IenVI_UA(IenVI_UA),
	.LOAD_F(LOAD_F),
	.LOAD_I(LOAD_I),
	.OenVI_UA(OenVI_UA),
	.Q0(Q0),
	.Q1(Q1)
);

// LOAD_F
initial
begin
	LOAD_F = 1'b1;
end 

// LOAD_I
initial
begin
	LOAD_I = 1'b1;
end 

// Q0
initial
begin
	Q0 = 1'b1;
end 

// Q1
initial
begin
	Q1 = 1'b0;
end 

UC_de_UA_vlg_sample_tst tb_sample (
	.LOAD_F(LOAD_F),
	.LOAD_I(LOAD_I),
	.Q0(Q0),
	.Q1(Q1),
	.sampler_tx(sampler)
);

UC_de_UA_vlg_check_tst tb_out(
	.IenVF_UA(IenVF_UA),
	.IenVI_UA(IenVI_UA),
	.OenVI_UA(OenVI_UA),
	.sampler_rx(sampler)
);
endmodule

