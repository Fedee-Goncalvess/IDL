// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/29/2025 01:53:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    decodificador_salida
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module decodificador_salida_vlg_sample_tst(
	Q0,
	Q1,
	Q2,
	sampler_tx
);
input  Q0;
input  Q1;
input  Q2;
output sampler_tx;

reg sample;
time current_time;
always @(Q0 or Q1 or Q2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module decodificador_salida_vlg_check_tst (
	Ien,
	Q0_UA,
	Q0_UC,
	Q0_UE,
	Q1_UA,
	Q1_UC,
	Q1_UE,
	Q2_UC,
	sampler_rx
);
input  Ien;
input  Q0_UA;
input  Q0_UC;
input  Q0_UE;
input  Q1_UA;
input  Q1_UC;
input  Q1_UE;
input  Q2_UC;
input sampler_rx;

reg  Ien_expected;
reg  Q0_UA_expected;
reg  Q0_UC_expected;
reg  Q0_UE_expected;
reg  Q1_UA_expected;
reg  Q1_UC_expected;
reg  Q1_UE_expected;
reg  Q2_UC_expected;

reg  Ien_prev;
reg  Q0_UA_prev;
reg  Q0_UC_prev;
reg  Q0_UE_prev;
reg  Q1_UA_prev;
reg  Q1_UC_prev;
reg  Q1_UE_prev;
reg  Q2_UC_prev;

reg  Ien_expected_prev;
reg  Q0_UA_expected_prev;
reg  Q0_UC_expected_prev;
reg  Q0_UE_expected_prev;
reg  Q1_UA_expected_prev;
reg  Q1_UC_expected_prev;
reg  Q1_UE_expected_prev;
reg  Q2_UC_expected_prev;

reg  last_Ien_exp;
reg  last_Q0_UA_exp;
reg  last_Q0_UC_exp;
reg  last_Q0_UE_exp;
reg  last_Q1_UA_exp;
reg  last_Q1_UC_exp;
reg  last_Q1_UE_exp;
reg  last_Q2_UC_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	Ien_prev = Ien;
	Q0_UA_prev = Q0_UA;
	Q0_UC_prev = Q0_UC;
	Q0_UE_prev = Q0_UE;
	Q1_UA_prev = Q1_UA;
	Q1_UC_prev = Q1_UC;
	Q1_UE_prev = Q1_UE;
	Q2_UC_prev = Q2_UC;
end

// update expected /o prevs

always @(trigger)
begin
	Ien_expected_prev = Ien_expected;
	Q0_UA_expected_prev = Q0_UA_expected;
	Q0_UC_expected_prev = Q0_UC_expected;
	Q0_UE_expected_prev = Q0_UE_expected;
	Q1_UA_expected_prev = Q1_UA_expected;
	Q1_UC_expected_prev = Q1_UC_expected;
	Q1_UE_expected_prev = Q1_UE_expected;
	Q2_UC_expected_prev = Q2_UC_expected;
end



// expected Ien
initial
begin
	Ien_expected = 1'bX;
end 

// expected Q1_UA
initial
begin
	Q1_UA_expected = 1'bX;
end 

// expected Q0_UA
initial
begin
	Q0_UA_expected = 1'bX;
end 

// expected Q2_UC
initial
begin
	Q2_UC_expected = 1'bX;
end 

// expected Q1_UC
initial
begin
	Q1_UC_expected = 1'bX;
end 

// expected Q0_UC
initial
begin
	Q0_UC_expected = 1'bX;
end 

// expected Q1_UE
initial
begin
	Q1_UE_expected = 1'bX;
end 

// expected Q0_UE
initial
begin
	Q0_UE_expected = 1'bX;
end 
// generate trigger
always @(Ien_expected or Ien or Q0_UA_expected or Q0_UA or Q0_UC_expected or Q0_UC or Q0_UE_expected or Q0_UE or Q1_UA_expected or Q1_UA or Q1_UC_expected or Q1_UC or Q1_UE_expected or Q1_UE or Q2_UC_expected or Q2_UC)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Ien = %b | expected Q0_UA = %b | expected Q0_UC = %b | expected Q0_UE = %b | expected Q1_UA = %b | expected Q1_UC = %b | expected Q1_UE = %b | expected Q2_UC = %b | ",Ien_expected_prev,Q0_UA_expected_prev,Q0_UC_expected_prev,Q0_UE_expected_prev,Q1_UA_expected_prev,Q1_UC_expected_prev,Q1_UE_expected_prev,Q2_UC_expected_prev);
	$display("| real Ien = %b | real Q0_UA = %b | real Q0_UC = %b | real Q0_UE = %b | real Q1_UA = %b | real Q1_UC = %b | real Q1_UE = %b | real Q2_UC = %b | ",Ien_prev,Q0_UA_prev,Q0_UC_prev,Q0_UE_prev,Q1_UA_prev,Q1_UC_prev,Q1_UE_prev,Q2_UC_prev);
`endif
	if (
		( Ien_expected_prev !== 1'bx ) && ( Ien_prev !== Ien_expected_prev )
		&& ((Ien_expected_prev !== last_Ien_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ien :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ien_expected_prev);
		$display ("     Real value = %b", Ien_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Ien_exp = Ien_expected_prev;
	end
	if (
		( Q0_UA_expected_prev !== 1'bx ) && ( Q0_UA_prev !== Q0_UA_expected_prev )
		&& ((Q0_UA_expected_prev !== last_Q0_UA_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0_UA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_UA_expected_prev);
		$display ("     Real value = %b", Q0_UA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q0_UA_exp = Q0_UA_expected_prev;
	end
	if (
		( Q0_UC_expected_prev !== 1'bx ) && ( Q0_UC_prev !== Q0_UC_expected_prev )
		&& ((Q0_UC_expected_prev !== last_Q0_UC_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0_UC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_UC_expected_prev);
		$display ("     Real value = %b", Q0_UC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q0_UC_exp = Q0_UC_expected_prev;
	end
	if (
		( Q0_UE_expected_prev !== 1'bx ) && ( Q0_UE_prev !== Q0_UE_expected_prev )
		&& ((Q0_UE_expected_prev !== last_Q0_UE_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0_UE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_UE_expected_prev);
		$display ("     Real value = %b", Q0_UE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q0_UE_exp = Q0_UE_expected_prev;
	end
	if (
		( Q1_UA_expected_prev !== 1'bx ) && ( Q1_UA_prev !== Q1_UA_expected_prev )
		&& ((Q1_UA_expected_prev !== last_Q1_UA_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1_UA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_UA_expected_prev);
		$display ("     Real value = %b", Q1_UA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q1_UA_exp = Q1_UA_expected_prev;
	end
	if (
		( Q1_UC_expected_prev !== 1'bx ) && ( Q1_UC_prev !== Q1_UC_expected_prev )
		&& ((Q1_UC_expected_prev !== last_Q1_UC_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1_UC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_UC_expected_prev);
		$display ("     Real value = %b", Q1_UC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q1_UC_exp = Q1_UC_expected_prev;
	end
	if (
		( Q1_UE_expected_prev !== 1'bx ) && ( Q1_UE_prev !== Q1_UE_expected_prev )
		&& ((Q1_UE_expected_prev !== last_Q1_UE_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1_UE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_UE_expected_prev);
		$display ("     Real value = %b", Q1_UE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q1_UE_exp = Q1_UE_expected_prev;
	end
	if (
		( Q2_UC_expected_prev !== 1'bx ) && ( Q2_UC_prev !== Q2_UC_expected_prev )
		&& ((Q2_UC_expected_prev !== last_Q2_UC_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q2_UC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q2_UC_expected_prev);
		$display ("     Real value = %b", Q2_UC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Q2_UC_exp = Q2_UC_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module decodificador_salida_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Q0;
reg Q1;
reg Q2;
// wires                                               
wire Ien;
wire Q0_UA;
wire Q0_UC;
wire Q0_UE;
wire Q1_UA;
wire Q1_UC;
wire Q1_UE;
wire Q2_UC;

wire sampler;                             

// assign statements (if any)                          
decodificador_salida i1 (
// port map - connection between master ports and signals/registers   
	.Ien(Ien),
	.Q0(Q0),
	.Q0_UA(Q0_UA),
	.Q0_UC(Q0_UC),
	.Q0_UE(Q0_UE),
	.Q1(Q1),
	.Q1_UA(Q1_UA),
	.Q1_UC(Q1_UC),
	.Q1_UE(Q1_UE),
	.Q2(Q2),
	.Q2_UC(Q2_UC)
);

// Q2
initial
begin
	Q2 = 1'b0;
end 

// Q1
initial
begin
	Q1 = 1'b0;
end 

// Q0
initial
begin
	Q0 = 1'b0;
end 

decodificador_salida_vlg_sample_tst tb_sample (
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.sampler_tx(sampler)
);

decodificador_salida_vlg_check_tst tb_out(
	.Ien(Ien),
	.Q0_UA(Q0_UA),
	.Q0_UC(Q0_UC),
	.Q0_UE(Q0_UE),
	.Q1_UA(Q1_UA),
	.Q1_UC(Q1_UC),
	.Q1_UE(Q1_UE),
	.Q2_UC(Q2_UC),
	.sampler_rx(sampler)
);
endmodule

