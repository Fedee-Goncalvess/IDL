// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/29/2025 02:53:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    unidad_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module unidad_control_vlg_sample_tst(
	b0,
	b1,
	b2,
	CLK,
	CONTINUAR,
	Cout,
	LOAD_F,
	LOAD_I,
	RECARGAR,
	START,
	UP_DOWN,
	VC,
	VF,
	VI,
	sampler_tx
);
input  b0;
input  b1;
input  b2;
input  CLK;
input  CONTINUAR;
input  Cout;
input  LOAD_F;
input  LOAD_I;
input  RECARGAR;
input  START;
input  UP_DOWN;
input [11:0] VC;
input [11:0] VF;
input [11:0] VI;
output sampler_tx;

reg sample;
time current_time;
always @(b0 or b1 or b2 or CLK or CONTINUAR or Cout or LOAD_F or LOAD_I or RECARGAR or START or UP_DOWN or VC or VF or VI)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module unidad_control_vlg_check_tst (
	Bout,
	ERROR,
	FIN,
	Ienb_UC,
	IenVF_UA,
	IenVI_UA,
	IenVI_UC,
	OenVC_UC,
	OenVI_UA,
	PAUSA,
	PRUEBA1,
	PRUEBA2,
	sampler_rx
);
input [11:0] Bout;
input  ERROR;
input  FIN;
input  Ienb_UC;
input  IenVF_UA;
input  IenVI_UA;
input  IenVI_UC;
input  OenVC_UC;
input  OenVI_UA;
input  PAUSA;
input  PRUEBA1;
input  PRUEBA2;
input sampler_rx;

reg [11:0] Bout_expected;
reg  ERROR_expected;
reg  FIN_expected;
reg  Ienb_UC_expected;
reg  IenVF_UA_expected;
reg  IenVI_UA_expected;
reg  IenVI_UC_expected;
reg  OenVC_UC_expected;
reg  OenVI_UA_expected;
reg  PAUSA_expected;
reg  PRUEBA1_expected;
reg  PRUEBA2_expected;

reg [11:0] Bout_prev;
reg  ERROR_prev;
reg  FIN_prev;
reg  Ienb_UC_prev;
reg  IenVF_UA_prev;
reg  IenVI_UA_prev;
reg  IenVI_UC_prev;
reg  OenVC_UC_prev;
reg  OenVI_UA_prev;
reg  PAUSA_prev;
reg  PRUEBA1_prev;
reg  PRUEBA2_prev;

reg [11:0] Bout_expected_prev;
reg  ERROR_expected_prev;
reg  FIN_expected_prev;
reg  Ienb_UC_expected_prev;
reg  IenVF_UA_expected_prev;
reg  IenVI_UA_expected_prev;
reg  IenVI_UC_expected_prev;
reg  OenVC_UC_expected_prev;
reg  OenVI_UA_expected_prev;
reg  PAUSA_expected_prev;
reg  PRUEBA1_expected_prev;
reg  PRUEBA2_expected_prev;

reg [11:0] last_Bout_exp;
reg  last_ERROR_exp;
reg  last_FIN_exp;
reg  last_Ienb_UC_exp;
reg  last_IenVF_UA_exp;
reg  last_IenVI_UA_exp;
reg  last_IenVI_UC_exp;
reg  last_OenVC_UC_exp;
reg  last_OenVI_UA_exp;
reg  last_PAUSA_exp;
reg  last_PRUEBA1_exp;
reg  last_PRUEBA2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	Bout_prev = Bout;
	ERROR_prev = ERROR;
	FIN_prev = FIN;
	Ienb_UC_prev = Ienb_UC;
	IenVF_UA_prev = IenVF_UA;
	IenVI_UA_prev = IenVI_UA;
	IenVI_UC_prev = IenVI_UC;
	OenVC_UC_prev = OenVC_UC;
	OenVI_UA_prev = OenVI_UA;
	PAUSA_prev = PAUSA;
	PRUEBA1_prev = PRUEBA1;
	PRUEBA2_prev = PRUEBA2;
end

// update expected /o prevs

always @(trigger)
begin
	Bout_expected_prev = Bout_expected;
	ERROR_expected_prev = ERROR_expected;
	FIN_expected_prev = FIN_expected;
	Ienb_UC_expected_prev = Ienb_UC_expected;
	IenVF_UA_expected_prev = IenVF_UA_expected;
	IenVI_UA_expected_prev = IenVI_UA_expected;
	IenVI_UC_expected_prev = IenVI_UC_expected;
	OenVC_UC_expected_prev = OenVC_UC_expected;
	OenVI_UA_expected_prev = OenVI_UA_expected;
	PAUSA_expected_prev = PAUSA_expected;
	PRUEBA1_expected_prev = PRUEBA1_expected;
	PRUEBA2_expected_prev = PRUEBA2_expected;
end


// expected Bout[ 11 ]
initial
begin
	Bout_expected[11] = 1'bX;
end 
// expected Bout[ 10 ]
initial
begin
	Bout_expected[10] = 1'bX;
end 
// expected Bout[ 9 ]
initial
begin
	Bout_expected[9] = 1'bX;
end 
// expected Bout[ 8 ]
initial
begin
	Bout_expected[8] = 1'bX;
end 
// expected Bout[ 7 ]
initial
begin
	Bout_expected[7] = 1'bX;
end 
// expected Bout[ 6 ]
initial
begin
	Bout_expected[6] = 1'bX;
end 
// expected Bout[ 5 ]
initial
begin
	Bout_expected[5] = 1'bX;
end 
// expected Bout[ 4 ]
initial
begin
	Bout_expected[4] = 1'bX;
end 
// expected Bout[ 3 ]
initial
begin
	Bout_expected[3] = 1'bX;
end 
// expected Bout[ 2 ]
initial
begin
	Bout_expected[2] = 1'bX;
end 
// expected Bout[ 1 ]
initial
begin
	Bout_expected[1] = 1'bX;
end 
// expected Bout[ 0 ]
initial
begin
	Bout_expected[0] = 1'bX;
end 

// expected ERROR
initial
begin
	ERROR_expected = 1'bX;
end 

// expected FIN
initial
begin
	FIN_expected = 1'bX;
end 

// expected Ienb_UC
initial
begin
	Ienb_UC_expected = 1'bX;
end 

// expected IenVF_UA
initial
begin
	IenVF_UA_expected = 1'bX;
end 

// expected IenVI_UA
initial
begin
	IenVI_UA_expected = 1'bX;
end 

// expected IenVI_UC
initial
begin
	IenVI_UC_expected = 1'bX;
end 

// expected OenVC_UC
initial
begin
	OenVC_UC_expected = 1'bX;
end 

// expected OenVI_UA
initial
begin
	OenVI_UA_expected = 1'bX;
end 

// expected PAUSA
initial
begin
	PAUSA_expected = 1'bX;
end 

// expected PRUEBA1
initial
begin
	PRUEBA1_expected = 1'bX;
end 

// expected PRUEBA2
initial
begin
	PRUEBA2_expected = 1'bX;
end 
// generate trigger
always @(Bout_expected or Bout or ERROR_expected or ERROR or FIN_expected or FIN or Ienb_UC_expected or Ienb_UC or IenVF_UA_expected or IenVF_UA or IenVI_UA_expected or IenVI_UA or IenVI_UC_expected or IenVI_UC or OenVC_UC_expected or OenVC_UC or OenVI_UA_expected or OenVI_UA or PAUSA_expected or PAUSA or PRUEBA1_expected or PRUEBA1 or PRUEBA2_expected or PRUEBA2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Bout = %b | expected ERROR = %b | expected FIN = %b | expected Ienb_UC = %b | expected IenVF_UA = %b | expected IenVI_UA = %b | expected IenVI_UC = %b | expected OenVC_UC = %b | expected OenVI_UA = %b | expected PAUSA = %b | expected PRUEBA1 = %b | expected PRUEBA2 = %b | ",Bout_expected_prev,ERROR_expected_prev,FIN_expected_prev,Ienb_UC_expected_prev,IenVF_UA_expected_prev,IenVI_UA_expected_prev,IenVI_UC_expected_prev,OenVC_UC_expected_prev,OenVI_UA_expected_prev,PAUSA_expected_prev,PRUEBA1_expected_prev,PRUEBA2_expected_prev);
	$display("| real Bout = %b | real ERROR = %b | real FIN = %b | real Ienb_UC = %b | real IenVF_UA = %b | real IenVI_UA = %b | real IenVI_UC = %b | real OenVC_UC = %b | real OenVI_UA = %b | real PAUSA = %b | real PRUEBA1 = %b | real PRUEBA2 = %b | ",Bout_prev,ERROR_prev,FIN_prev,Ienb_UC_prev,IenVF_UA_prev,IenVI_UA_prev,IenVI_UC_prev,OenVC_UC_prev,OenVI_UA_prev,PAUSA_prev,PRUEBA1_prev,PRUEBA2_prev);
`endif
	if (
		( Bout_expected_prev[0] !== 1'bx ) && ( Bout_prev[0] !== Bout_expected_prev[0] )
		&& ((Bout_expected_prev[0] !== last_Bout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp[0] = Bout_expected_prev[0];
	end
	if (
		( Bout_expected_prev[1] !== 1'bx ) && ( Bout_prev[1] !== Bout_expected_prev[1] )
		&& ((Bout_expected_prev[1] !== last_Bout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp[1] = Bout_expected_prev[1];
	end
	if (
		( Bout_expected_prev[2] !== 1'bx ) && ( Bout_prev[2] !== Bout_expected_prev[2] )
		&& ((Bout_expected_prev[2] !== last_Bout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp[2] = Bout_expected_prev[2];
	end
	if (
		( Bout_expected_prev[3] !== 1'bx ) && ( Bout_prev[3] !== Bout_expected_prev[3] )
		&& ((Bout_expected_prev[3] !== last_Bout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp[3] = Bout_expected_prev[3];
	end
	if (
		( Bout_expected_prev[4] !== 1'bx ) && ( Bout_prev[4] !== Bout_expected_prev[4] )
		&& ((Bout_expected_prev[4] !== last_Bout_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp[4] = Bout_expected_prev[4];
	end
	if (
		( Bout_expected_prev[5] !== 1'bx ) && ( Bout_prev[5] !== Bout_expected_prev[5] )
		&& ((Bout_expected_prev[5] !== last_Bout_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp[5] = Bout_expected_prev[5];
	end
	if (
		( Bout_expected_prev[6] !== 1'bx ) && ( Bout_prev[6] !== Bout_expected_prev[6] )
		&& ((Bout_expected_prev[6] !== last_Bout_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp[6] = Bout_expected_prev[6];
	end
	if (
		( Bout_expected_prev[7] !== 1'bx ) && ( Bout_prev[7] !== Bout_expected_prev[7] )
		&& ((Bout_expected_prev[7] !== last_Bout_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp[7] = Bout_expected_prev[7];
	end
	if (
		( Bout_expected_prev[8] !== 1'bx ) && ( Bout_prev[8] !== Bout_expected_prev[8] )
		&& ((Bout_expected_prev[8] !== last_Bout_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp[8] = Bout_expected_prev[8];
	end
	if (
		( Bout_expected_prev[9] !== 1'bx ) && ( Bout_prev[9] !== Bout_expected_prev[9] )
		&& ((Bout_expected_prev[9] !== last_Bout_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp[9] = Bout_expected_prev[9];
	end
	if (
		( Bout_expected_prev[10] !== 1'bx ) && ( Bout_prev[10] !== Bout_expected_prev[10] )
		&& ((Bout_expected_prev[10] !== last_Bout_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp[10] = Bout_expected_prev[10];
	end
	if (
		( Bout_expected_prev[11] !== 1'bx ) && ( Bout_prev[11] !== Bout_expected_prev[11] )
		&& ((Bout_expected_prev[11] !== last_Bout_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bout[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bout_expected_prev);
		$display ("     Real value = %b", Bout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Bout_exp[11] = Bout_expected_prev[11];
	end
	if (
		( ERROR_expected_prev !== 1'bx ) && ( ERROR_prev !== ERROR_expected_prev )
		&& ((ERROR_expected_prev !== last_ERROR_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ERROR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ERROR_expected_prev);
		$display ("     Real value = %b", ERROR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ERROR_exp = ERROR_expected_prev;
	end
	if (
		( FIN_expected_prev !== 1'bx ) && ( FIN_prev !== FIN_expected_prev )
		&& ((FIN_expected_prev !== last_FIN_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIN_expected_prev);
		$display ("     Real value = %b", FIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FIN_exp = FIN_expected_prev;
	end
	if (
		( Ienb_UC_expected_prev !== 1'bx ) && ( Ienb_UC_prev !== Ienb_UC_expected_prev )
		&& ((Ienb_UC_expected_prev !== last_Ienb_UC_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ienb_UC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ienb_UC_expected_prev);
		$display ("     Real value = %b", Ienb_UC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Ienb_UC_exp = Ienb_UC_expected_prev;
	end
	if (
		( IenVF_UA_expected_prev !== 1'bx ) && ( IenVF_UA_prev !== IenVF_UA_expected_prev )
		&& ((IenVF_UA_expected_prev !== last_IenVF_UA_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IenVF_UA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IenVF_UA_expected_prev);
		$display ("     Real value = %b", IenVF_UA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_IenVF_UA_exp = IenVF_UA_expected_prev;
	end
	if (
		( IenVI_UA_expected_prev !== 1'bx ) && ( IenVI_UA_prev !== IenVI_UA_expected_prev )
		&& ((IenVI_UA_expected_prev !== last_IenVI_UA_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IenVI_UA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IenVI_UA_expected_prev);
		$display ("     Real value = %b", IenVI_UA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_IenVI_UA_exp = IenVI_UA_expected_prev;
	end
	if (
		( IenVI_UC_expected_prev !== 1'bx ) && ( IenVI_UC_prev !== IenVI_UC_expected_prev )
		&& ((IenVI_UC_expected_prev !== last_IenVI_UC_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IenVI_UC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IenVI_UC_expected_prev);
		$display ("     Real value = %b", IenVI_UC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_IenVI_UC_exp = IenVI_UC_expected_prev;
	end
	if (
		( OenVC_UC_expected_prev !== 1'bx ) && ( OenVC_UC_prev !== OenVC_UC_expected_prev )
		&& ((OenVC_UC_expected_prev !== last_OenVC_UC_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OenVC_UC :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OenVC_UC_expected_prev);
		$display ("     Real value = %b", OenVC_UC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_OenVC_UC_exp = OenVC_UC_expected_prev;
	end
	if (
		( OenVI_UA_expected_prev !== 1'bx ) && ( OenVI_UA_prev !== OenVI_UA_expected_prev )
		&& ((OenVI_UA_expected_prev !== last_OenVI_UA_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OenVI_UA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OenVI_UA_expected_prev);
		$display ("     Real value = %b", OenVI_UA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_OenVI_UA_exp = OenVI_UA_expected_prev;
	end
	if (
		( PAUSA_expected_prev !== 1'bx ) && ( PAUSA_prev !== PAUSA_expected_prev )
		&& ((PAUSA_expected_prev !== last_PAUSA_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PAUSA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PAUSA_expected_prev);
		$display ("     Real value = %b", PAUSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_PAUSA_exp = PAUSA_expected_prev;
	end
	if (
		( PRUEBA1_expected_prev !== 1'bx ) && ( PRUEBA1_prev !== PRUEBA1_expected_prev )
		&& ((PRUEBA1_expected_prev !== last_PRUEBA1_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRUEBA1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRUEBA1_expected_prev);
		$display ("     Real value = %b", PRUEBA1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_PRUEBA1_exp = PRUEBA1_expected_prev;
	end
	if (
		( PRUEBA2_expected_prev !== 1'bx ) && ( PRUEBA2_prev !== PRUEBA2_expected_prev )
		&& ((PRUEBA2_expected_prev !== last_PRUEBA2_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PRUEBA2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PRUEBA2_expected_prev);
		$display ("     Real value = %b", PRUEBA2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_PRUEBA2_exp = PRUEBA2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module unidad_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg b0;
reg b1;
reg b2;
reg CLK;
reg CONTINUAR;
reg Cout;
reg LOAD_F;
reg LOAD_I;
reg RECARGAR;
reg START;
reg UP_DOWN;
reg [11:0] VC;
reg [11:0] VF;
reg [11:0] VI;
// wires                                               
wire [11:0] Bout;
wire ERROR;
wire FIN;
wire Ienb_UC;
wire IenVF_UA;
wire IenVI_UA;
wire IenVI_UC;
wire OenVC_UC;
wire OenVI_UA;
wire PAUSA;
wire PRUEBA1;
wire PRUEBA2;

wire sampler;                             

// assign statements (if any)                          
unidad_control i1 (
// port map - connection between master ports and signals/registers   
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.Bout(Bout),
	.CLK(CLK),
	.CONTINUAR(CONTINUAR),
	.Cout(Cout),
	.ERROR(ERROR),
	.FIN(FIN),
	.Ienb_UC(Ienb_UC),
	.IenVF_UA(IenVF_UA),
	.IenVI_UA(IenVI_UA),
	.IenVI_UC(IenVI_UC),
	.LOAD_F(LOAD_F),
	.LOAD_I(LOAD_I),
	.OenVC_UC(OenVC_UC),
	.OenVI_UA(OenVI_UA),
	.PAUSA(PAUSA),
	.PRUEBA1(PRUEBA1),
	.PRUEBA2(PRUEBA2),
	.RECARGAR(RECARGAR),
	.START(START),
	.UP_DOWN(UP_DOWN),
	.VC(VC),
	.VF(VF),
	.VI(VI)
);

// b0
initial
begin
	b0 = 1'b0;
end 

// b1
initial
begin
	b1 = 1'b0;
end 

// b2
initial
begin
	b2 = 1'b0;
end 

// CLK
initial
begin
	CLK = 1'b0;
end 

// CONTINUAR
initial
begin
	CONTINUAR = 1'b0;
end 

// Cout
initial
begin
	Cout = 1'b0;
end 

// LOAD_F
initial
begin
	LOAD_F = 1'b0;
end 

// LOAD_I
initial
begin
	LOAD_I = 1'b0;
end 

// RECARGAR
initial
begin
	RECARGAR = 1'b0;
end 

// START
initial
begin
	START = 1'b0;
end 

// UP_DOWN
initial
begin
	UP_DOWN = 1'b0;
end 
// VC[ 11 ]
initial
begin
	VC[11] = 1'b0;
end 
// VC[ 10 ]
initial
begin
	VC[10] = 1'b0;
end 
// VC[ 9 ]
initial
begin
	VC[9] = 1'b0;
end 
// VC[ 8 ]
initial
begin
	VC[8] = 1'b0;
end 
// VC[ 7 ]
initial
begin
	VC[7] = 1'b0;
end 
// VC[ 6 ]
initial
begin
	VC[6] = 1'b0;
end 
// VC[ 5 ]
initial
begin
	VC[5] = 1'b0;
end 
// VC[ 4 ]
initial
begin
	VC[4] = 1'b0;
end 
// VC[ 3 ]
initial
begin
	VC[3] = 1'b0;
end 
// VC[ 2 ]
initial
begin
	VC[2] = 1'b0;
end 
// VC[ 1 ]
initial
begin
	VC[1] = 1'b0;
end 
// VC[ 0 ]
initial
begin
	VC[0] = 1'b0;
end 
// VF[ 11 ]
initial
begin
	VF[11] = 1'b0;
end 
// VF[ 10 ]
initial
begin
	VF[10] = 1'b0;
end 
// VF[ 9 ]
initial
begin
	VF[9] = 1'b0;
end 
// VF[ 8 ]
initial
begin
	VF[8] = 1'b0;
end 
// VF[ 7 ]
initial
begin
	VF[7] = 1'b0;
end 
// VF[ 6 ]
initial
begin
	VF[6] = 1'b0;
end 
// VF[ 5 ]
initial
begin
	VF[5] = 1'b0;
end 
// VF[ 4 ]
initial
begin
	VF[4] = 1'b0;
end 
// VF[ 3 ]
initial
begin
	VF[3] = 1'b0;
end 
// VF[ 2 ]
initial
begin
	VF[2] = 1'b0;
end 
// VF[ 1 ]
initial
begin
	VF[1] = 1'b0;
end 
// VF[ 0 ]
initial
begin
	VF[0] = 1'b0;
end 
// VI[ 11 ]
initial
begin
	VI[11] = 1'b0;
end 
// VI[ 10 ]
initial
begin
	VI[10] = 1'b0;
end 
// VI[ 9 ]
initial
begin
	VI[9] = 1'b0;
end 
// VI[ 8 ]
initial
begin
	VI[8] = 1'b0;
end 
// VI[ 7 ]
initial
begin
	VI[7] = 1'b0;
end 
// VI[ 6 ]
initial
begin
	VI[6] = 1'b0;
end 
// VI[ 5 ]
initial
begin
	VI[5] = 1'b0;
end 
// VI[ 4 ]
initial
begin
	VI[4] = 1'b0;
end 
// VI[ 3 ]
initial
begin
	VI[3] = 1'b0;
end 
// VI[ 2 ]
initial
begin
	VI[2] = 1'b0;
end 
// VI[ 1 ]
initial
begin
	VI[1] = 1'b0;
end 
// VI[ 0 ]
initial
begin
	VI[0] = 1'b0;
end 

unidad_control_vlg_sample_tst tb_sample (
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.CLK(CLK),
	.CONTINUAR(CONTINUAR),
	.Cout(Cout),
	.LOAD_F(LOAD_F),
	.LOAD_I(LOAD_I),
	.RECARGAR(RECARGAR),
	.START(START),
	.UP_DOWN(UP_DOWN),
	.VC(VC),
	.VF(VF),
	.VI(VI),
	.sampler_tx(sampler)
);

unidad_control_vlg_check_tst tb_out(
	.Bout(Bout),
	.ERROR(ERROR),
	.FIN(FIN),
	.Ienb_UC(Ienb_UC),
	.IenVF_UA(IenVF_UA),
	.IenVI_UA(IenVI_UA),
	.IenVI_UC(IenVI_UC),
	.OenVC_UC(OenVC_UC),
	.OenVI_UA(OenVI_UA),
	.PAUSA(PAUSA),
	.PRUEBA1(PRUEBA1),
	.PRUEBA2(PRUEBA2),
	.sampler_rx(sampler)
);
endmodule

