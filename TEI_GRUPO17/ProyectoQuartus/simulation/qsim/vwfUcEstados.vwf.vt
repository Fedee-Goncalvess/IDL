// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/26/2025 04:01:19"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    UC_estados
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module UC_estados_vlg_sample_tst(
	Q0,
	Q1,
	sampler_tx
);
input  Q0;
input  Q1;
output sampler_tx;

reg sample;
time current_time;
always @(Q0 or Q1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module UC_estados_vlg_check_tst (
	ERROR,
	FIN,
	PAUSA,
	sampler_rx
);
input  ERROR;
input  FIN;
input  PAUSA;
input sampler_rx;

reg  ERROR_expected;
reg  FIN_expected;
reg  PAUSA_expected;

reg  ERROR_prev;
reg  FIN_prev;
reg  PAUSA_prev;

reg  ERROR_expected_prev;
reg  FIN_expected_prev;
reg  PAUSA_expected_prev;

reg  last_ERROR_exp;
reg  last_FIN_exp;
reg  last_PAUSA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	ERROR_prev = ERROR;
	FIN_prev = FIN;
	PAUSA_prev = PAUSA;
end

// update expected /o prevs

always @(trigger)
begin
	ERROR_expected_prev = ERROR_expected;
	FIN_expected_prev = FIN_expected;
	PAUSA_expected_prev = PAUSA_expected;
end



// expected ERROR
initial
begin
	ERROR_expected = 1'bX;
end 

// expected FIN
initial
begin
	FIN_expected = 1'bX;
end 

// expected PAUSA
initial
begin
	PAUSA_expected = 1'bX;
end 
// generate trigger
always @(ERROR_expected or ERROR or FIN_expected or FIN or PAUSA_expected or PAUSA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ERROR = %b | expected FIN = %b | expected PAUSA = %b | ",ERROR_expected_prev,FIN_expected_prev,PAUSA_expected_prev);
	$display("| real ERROR = %b | real FIN = %b | real PAUSA = %b | ",ERROR_prev,FIN_prev,PAUSA_prev);
`endif
	if (
		( ERROR_expected_prev !== 1'bx ) && ( ERROR_prev !== ERROR_expected_prev )
		&& ((ERROR_expected_prev !== last_ERROR_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ERROR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ERROR_expected_prev);
		$display ("     Real value = %b", ERROR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ERROR_exp = ERROR_expected_prev;
	end
	if (
		( FIN_expected_prev !== 1'bx ) && ( FIN_prev !== FIN_expected_prev )
		&& ((FIN_expected_prev !== last_FIN_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIN_expected_prev);
		$display ("     Real value = %b", FIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_FIN_exp = FIN_expected_prev;
	end
	if (
		( PAUSA_expected_prev !== 1'bx ) && ( PAUSA_prev !== PAUSA_expected_prev )
		&& ((PAUSA_expected_prev !== last_PAUSA_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PAUSA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PAUSA_expected_prev);
		$display ("     Real value = %b", PAUSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_PAUSA_exp = PAUSA_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module UC_estados_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Q0;
reg Q1;
// wires                                               
wire ERROR;
wire FIN;
wire PAUSA;

wire sampler;                             

// assign statements (if any)                          
UC_estados i1 (
// port map - connection between master ports and signals/registers   
	.ERROR(ERROR),
	.FIN(FIN),
	.PAUSA(PAUSA),
	.Q0(Q0),
	.Q1(Q1)
);

// Q0
initial
begin
	Q0 = 1'b1;
end 

// Q1
initial
begin
	Q1 = 1'b0;
end 

UC_estados_vlg_sample_tst tb_sample (
	.Q0(Q0),
	.Q1(Q1),
	.sampler_tx(sampler)
);

UC_estados_vlg_check_tst tb_out(
	.ERROR(ERROR),
	.FIN(FIN),
	.PAUSA(PAUSA),
	.sampler_rx(sampler)
);
endmodule

