// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/31/2025 23:40:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    circuito_principal_bloque
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module circuito_principal_bloque_vlg_sample_tst(
	b,
	CLK,
	CONTINUAR,
	DATA,
	LOAD_F,
	LOAD_I,
	RECARGAR,
	START,
	UP_DOWN,
	sampler_tx
);
input [2:0] b;
input  CLK;
input  CONTINUAR;
input [11:0] DATA;
input  LOAD_F;
input  LOAD_I;
input  RECARGAR;
input  START;
input  UP_DOWN;
output sampler_tx;

reg sample;
time current_time;
always @(b or CLK or CONTINUAR or DATA or LOAD_F or LOAD_I or RECARGAR or START or UP_DOWN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module circuito_principal_bloque_vlg_check_tst (
	DATA,
	ERROR,
	FIN,
	PAUSA,
	sampler_rx
);
input [11:0] DATA;
input  ERROR;
input  FIN;
input  PAUSA;
input sampler_rx;

reg [11:0] DATA_expected;
reg  ERROR_expected;
reg  FIN_expected;
reg  PAUSA_expected;

reg [11:0] DATA_prev;
reg  ERROR_prev;
reg  FIN_prev;
reg  PAUSA_prev;

reg [11:0] DATA_expected_prev;
reg  ERROR_expected_prev;
reg  FIN_expected_prev;
reg  PAUSA_expected_prev;

reg [11:0] last_DATA_exp;
reg  last_ERROR_exp;
reg  last_FIN_exp;
reg  last_PAUSA_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	DATA_prev = DATA;
	ERROR_prev = ERROR;
	FIN_prev = FIN;
	PAUSA_prev = PAUSA;
end

// update expected /o prevs

always @(trigger)
begin
	DATA_expected_prev = DATA_expected;
	ERROR_expected_prev = ERROR_expected;
	FIN_expected_prev = FIN_expected;
	PAUSA_expected_prev = PAUSA_expected;
end



// expected ERROR
initial
begin
	ERROR_expected = 1'bX;
end 

// expected FIN
initial
begin
	FIN_expected = 1'bX;
end 

// expected PAUSA
initial
begin
	PAUSA_expected = 1'bX;
end 
// generate trigger
always @(DATA_expected or DATA or ERROR_expected or ERROR or FIN_expected or FIN or PAUSA_expected or PAUSA)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DATA = %b | expected ERROR = %b | expected FIN = %b | expected PAUSA = %b | ",DATA_expected_prev,ERROR_expected_prev,FIN_expected_prev,PAUSA_expected_prev);
	$display("| real DATA = %b | real ERROR = %b | real FIN = %b | real PAUSA = %b | ",DATA_prev,ERROR_prev,FIN_prev,PAUSA_prev);
`endif
	if (
		( DATA_expected_prev[0] !== 1'bx ) && ( DATA_prev[0] !== DATA_expected_prev[0] )
		&& ((DATA_expected_prev[0] !== last_DATA_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_exp[0] = DATA_expected_prev[0];
	end
	if (
		( DATA_expected_prev[1] !== 1'bx ) && ( DATA_prev[1] !== DATA_expected_prev[1] )
		&& ((DATA_expected_prev[1] !== last_DATA_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_exp[1] = DATA_expected_prev[1];
	end
	if (
		( DATA_expected_prev[2] !== 1'bx ) && ( DATA_prev[2] !== DATA_expected_prev[2] )
		&& ((DATA_expected_prev[2] !== last_DATA_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_exp[2] = DATA_expected_prev[2];
	end
	if (
		( DATA_expected_prev[3] !== 1'bx ) && ( DATA_prev[3] !== DATA_expected_prev[3] )
		&& ((DATA_expected_prev[3] !== last_DATA_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_exp[3] = DATA_expected_prev[3];
	end
	if (
		( DATA_expected_prev[4] !== 1'bx ) && ( DATA_prev[4] !== DATA_expected_prev[4] )
		&& ((DATA_expected_prev[4] !== last_DATA_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_exp[4] = DATA_expected_prev[4];
	end
	if (
		( DATA_expected_prev[5] !== 1'bx ) && ( DATA_prev[5] !== DATA_expected_prev[5] )
		&& ((DATA_expected_prev[5] !== last_DATA_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_exp[5] = DATA_expected_prev[5];
	end
	if (
		( DATA_expected_prev[6] !== 1'bx ) && ( DATA_prev[6] !== DATA_expected_prev[6] )
		&& ((DATA_expected_prev[6] !== last_DATA_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_exp[6] = DATA_expected_prev[6];
	end
	if (
		( DATA_expected_prev[7] !== 1'bx ) && ( DATA_prev[7] !== DATA_expected_prev[7] )
		&& ((DATA_expected_prev[7] !== last_DATA_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_exp[7] = DATA_expected_prev[7];
	end
	if (
		( DATA_expected_prev[8] !== 1'bx ) && ( DATA_prev[8] !== DATA_expected_prev[8] )
		&& ((DATA_expected_prev[8] !== last_DATA_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_exp[8] = DATA_expected_prev[8];
	end
	if (
		( DATA_expected_prev[9] !== 1'bx ) && ( DATA_prev[9] !== DATA_expected_prev[9] )
		&& ((DATA_expected_prev[9] !== last_DATA_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_exp[9] = DATA_expected_prev[9];
	end
	if (
		( DATA_expected_prev[10] !== 1'bx ) && ( DATA_prev[10] !== DATA_expected_prev[10] )
		&& ((DATA_expected_prev[10] !== last_DATA_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_exp[10] = DATA_expected_prev[10];
	end
	if (
		( DATA_expected_prev[11] !== 1'bx ) && ( DATA_prev[11] !== DATA_expected_prev[11] )
		&& ((DATA_expected_prev[11] !== last_DATA_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DATA[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DATA_expected_prev);
		$display ("     Real value = %b", DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DATA_exp[11] = DATA_expected_prev[11];
	end
	if (
		( ERROR_expected_prev !== 1'bx ) && ( ERROR_prev !== ERROR_expected_prev )
		&& ((ERROR_expected_prev !== last_ERROR_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ERROR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ERROR_expected_prev);
		$display ("     Real value = %b", ERROR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ERROR_exp = ERROR_expected_prev;
	end
	if (
		( FIN_expected_prev !== 1'bx ) && ( FIN_prev !== FIN_expected_prev )
		&& ((FIN_expected_prev !== last_FIN_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port FIN :: @time = %t",  $realtime);
		$display ("     Expected value = %b", FIN_expected_prev);
		$display ("     Real value = %b", FIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_FIN_exp = FIN_expected_prev;
	end
	if (
		( PAUSA_expected_prev !== 1'bx ) && ( PAUSA_prev !== PAUSA_expected_prev )
		&& ((PAUSA_expected_prev !== last_PAUSA_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PAUSA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PAUSA_expected_prev);
		$display ("     Real value = %b", PAUSA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_PAUSA_exp = PAUSA_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module circuito_principal_bloque_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] b;
reg CLK;
reg CONTINUAR;
reg [11:0] treg_DATA;
reg LOAD_F;
reg LOAD_I;
reg RECARGAR;
reg START;
reg UP_DOWN;
// wires                                               
wire [11:0] DATA;
wire ERROR;
wire FIN;
wire PAUSA;

wire sampler;                             

// assign statements (if any)                          
assign DATA = treg_DATA;
circuito_principal_bloque i1 (
// port map - connection between master ports and signals/registers   
	.b(b),
	.CLK(CLK),
	.CONTINUAR(CONTINUAR),
	.DATA(DATA),
	.ERROR(ERROR),
	.FIN(FIN),
	.LOAD_F(LOAD_F),
	.LOAD_I(LOAD_I),
	.PAUSA(PAUSA),
	.RECARGAR(RECARGAR),
	.START(START),
	.UP_DOWN(UP_DOWN)
);
// b[ 2 ]
initial
begin
	b[2] = 1'b0;
end 
// b[ 1 ]
initial
begin
	b[1] = 1'b0;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// CONTINUAR
initial
begin
	CONTINUAR = 1'b0;
end 
// DATA[ 11 ]
initial
begin
	treg_DATA[11] = 1'b0;
	treg_DATA[11] = #40000 1'bZ;
end 
// DATA[ 10 ]
initial
begin
	treg_DATA[10] = 1'b0;
	treg_DATA[10] = #40000 1'bZ;
end 
// DATA[ 9 ]
initial
begin
	treg_DATA[9] = 1'b0;
	treg_DATA[9] = #40000 1'bZ;
end 
// DATA[ 8 ]
initial
begin
	treg_DATA[8] = 1'b0;
	treg_DATA[8] = #40000 1'bZ;
end 
// DATA[ 7 ]
initial
begin
	treg_DATA[7] = 1'b0;
	treg_DATA[7] = #40000 1'bZ;
end 
// DATA[ 6 ]
initial
begin
	treg_DATA[6] = 1'b0;
	treg_DATA[6] = #40000 1'bZ;
end 
// DATA[ 5 ]
initial
begin
	treg_DATA[5] = 1'b0;
	treg_DATA[5] = #40000 1'bZ;
end 
// DATA[ 4 ]
initial
begin
	treg_DATA[4] = 1'b0;
	treg_DATA[4] = #40000 1'bZ;
end 
// DATA[ 3 ]
initial
begin
	treg_DATA[3] = 1'b0;
	treg_DATA[3] = #40000 1'bZ;
end 
// DATA[ 2 ]
initial
begin
	treg_DATA[2] = 1'b0;
	treg_DATA[2] = #40000 1'bZ;
end 
// DATA[ 1 ]
initial
begin
	treg_DATA[1] = 1'b0;
	treg_DATA[1] = #20000 1'b1;
	treg_DATA[1] = #20000 1'bZ;
end 
// DATA[ 0 ]
initial
begin
	treg_DATA[0] = 1'b1;
	treg_DATA[0] = #20000 1'b0;
	treg_DATA[0] = #20000 1'bZ;
end 

// LOAD_F
initial
begin
	LOAD_F = 1'b0;
	LOAD_F = #20000 1'b1;
	LOAD_F = #20000 1'b0;
end 

// LOAD_I
initial
begin
	LOAD_I = 1'b1;
	LOAD_I = #20000 1'b0;
end 

// RECARGAR
initial
begin
	RECARGAR = 1'b0;
end 

// START
initial
begin
	START = 1'b0;
	START = #70000 1'b1;
	START = #60000 1'b0;
end 

// UP_DOWN
initial
begin
	UP_DOWN = 1'b0;
end 

circuito_principal_bloque_vlg_sample_tst tb_sample (
	.b(b),
	.CLK(CLK),
	.CONTINUAR(CONTINUAR),
	.DATA(DATA),
	.LOAD_F(LOAD_F),
	.LOAD_I(LOAD_I),
	.RECARGAR(RECARGAR),
	.START(START),
	.UP_DOWN(UP_DOWN),
	.sampler_tx(sampler)
);

circuito_principal_bloque_vlg_check_tst tb_out(
	.DATA(DATA),
	.ERROR(ERROR),
	.FIN(FIN),
	.PAUSA(PAUSA),
	.sampler_rx(sampler)
);
endmodule

